{"version":3,"sources":["module.android.ts"],"names":["NativeModules","PermissionsAndroid","Core","RESULTS","uniq","RNP","RNPermissions","grantedToStatus","granted","GRANTED","DENIED","coreStatusToStatus","status","BLOCKED","UNAVAILABLE","openSettings","check","permission","available","includes","isNonRequestable","request","rationale","setNonRequestable","splitByUsability","permissions","unusables","usables","blocklist","getNonRequestables","index","length","push","checkNotifications","checkMultiple","dedup","output","Promise","all","map","requestMultiple","toSetAsNonRequestable","statuses","hasOwnProperty","setNonRequestables","module","requestNotifications"],"mappings":"AAAA,SACEA,aADF,EAGEC,kBAAkB,IAAIC,IAHxB,QAMO,cANP;AAOA,SAAQC,OAAR,QAAsB,aAAtB;AAGA,SAAQC,IAAR,QAAmB,SAAnB;AAEA,MAAMC,GASL,GAAGL,aAAa,CAACM,aATlB;;AAWA,SAASC,eAAT,CAAyBC,OAAzB,EAA6D;AAC3D,SAAOA,OAAO,GAAGL,OAAO,CAACM,OAAX,GAAqBN,OAAO,CAACO,MAA3C;AACD;;AAED,SAASC,kBAAT,CAA4BC,MAA5B,EAAkE;AAChE,UAAQA,MAAR;AACE,SAAK,SAAL;AACE,aAAOT,OAAO,CAACM,OAAf;;AACF,SAAK,QAAL;AACE,aAAON,OAAO,CAACO,MAAf;;AACF,SAAK,iBAAL;AACE,aAAOP,OAAO,CAACU,OAAf;;AACF;AACE,aAAOV,OAAO,CAACW,WAAf;AARJ;AAUD;;AAED,eAAeC,YAAf,GAA6C;AAC3C,QAAMV,GAAG,CAACU,YAAJ,EAAN;AACD;;AAED,eAAeC,KAAf,CAAqBC,UAArB,EAAwE;AACtE,MAAI,CAACZ,GAAG,CAACa,SAAJ,CAAcC,QAAd,CAAuBF,UAAvB,CAAL,EAAyC;AACvC,WAAOd,OAAO,CAACW,WAAf;AACD;;AACD,MAAI,MAAMT,GAAG,CAACe,gBAAJ,CAAqBH,UAArB,CAAV,EAA4C;AAC1C,WAAOd,OAAO,CAACU,OAAf;AACD;;AAED,QAAML,OAAO,GAAG,MAAMN,IAAI,CAACc,KAAL,CAAWC,UAAX,CAAtB;AACA,SAAOV,eAAe,CAACC,OAAD,CAAtB;AACD;;AAED,eAAea,OAAf,CACEJ,UADF,EAEEK,SAFF,EAG6B;AAC3B,MAAI,CAACjB,GAAG,CAACa,SAAJ,CAAcC,QAAd,CAAuBF,UAAvB,CAAL,EAAyC;AACvC,WAAOd,OAAO,CAACW,WAAf;AACD;;AACD,MAAI,MAAMT,GAAG,CAACe,gBAAJ,CAAqBH,UAArB,CAAV,EAA4C;AAC1C,WAAOd,OAAO,CAACU,OAAf;AACD;;AAED,QAAMD,MAAM,GAAGD,kBAAkB,EAC/B,MAAMT,IAAI,CAACmB,OAAL,CAAaJ,UAAb,EAA2CK,SAA3C,CADyB,EAAjC;;AAIA,MAAIV,MAAM,KAAKT,OAAO,CAACU,OAAvB,EAAgC;AAC9B,UAAMR,GAAG,CAACkB,iBAAJ,CAAsBN,UAAtB,CAAN;AACD;;AAED,SAAOL,MAAP;AACD;;AAED,eAAeY,gBAAf,CACEC,WADF,EAKG;AACD,QAAMC,SAAuD,GAAG,EAAhE;AACA,QAAMC,OAAoB,GAAG,EAA7B;AACA,QAAMC,SAAS,GAAG,MAAMvB,GAAG,CAACwB,kBAAJ,EAAxB;;AAEA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGL,WAAW,CAACM,MAAxC,EAAgDD,KAAK,EAArD,EAAyD;AACvD,UAAMb,UAAqB,GAAGQ,WAAW,CAACK,KAAD,CAAzC;;AAEA,QAAIF,SAAS,CAACT,QAAV,CAAmBF,UAAnB,CAAJ,EAAoC;AAClCS,MAAAA,SAAS,CAACT,UAAD,CAAT,GAAwBd,OAAO,CAACU,OAAhC;AACA;AACD;;AACD,QAAI,CAACR,GAAG,CAACa,SAAJ,CAAcC,QAAd,CAAuBF,UAAvB,CAAL,EAAyC;AACvCS,MAAAA,SAAS,CAACT,UAAD,CAAT,GAAwBd,OAAO,CAACW,WAAhC;AACA;AACD;;AAEDa,IAAAA,OAAO,CAACK,IAAR,CAAaf,UAAb;AACD;;AAED,SAAO;AAACS,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,GAAP;AACD;;AAED,SAASM,kBAAT,GAA8D;AAC5D,SAAO5B,GAAG,CAAC4B,kBAAJ,EAAP;AACD;;AAED,eAAeC,aAAf,CACET,WADF,EAEgD;AAC9C,QAAMU,KAAK,GAAG/B,IAAI,CAACqB,WAAD,CAAlB;AACA,QAAM;AAACC,IAAAA,SAAS,EAAEU,MAAZ;AAAoBT,IAAAA;AAApB,MAA+B,MAAMH,gBAAgB,CAACW,KAAD,CAA3D;AAEA,QAAME,OAAO,CAACC,GAAR,CACJX,OAAO,CAACY,GAAR,CAAY,MAAOtB,UAAP,IAAiC;AAC3C,UAAMT,OAAO,GAAG,MAAMN,IAAI,CAACc,KAAL,CAAWC,UAAX,CAAtB;AACAmB,IAAAA,MAAM,CAACnB,UAAD,CAAN,GAAqBV,eAAe,CAACC,OAAD,CAApC;AACD,GAHD,CADI,CAAN;AAOA,SAAO4B,MAAP;AACD;;AAED,eAAeI,eAAf,CACEf,WADF,EAEgD;AAC9C,QAAMgB,qBAAmC,GAAG,EAA5C;AACA,QAAMN,KAAK,GAAG/B,IAAI,CAACqB,WAAD,CAAlB;AACA,QAAM;AAACC,IAAAA,SAAS,EAAEU,MAAZ;AAAoBT,IAAAA;AAApB,MAA+B,MAAMH,gBAAgB,CAACW,KAAD,CAA3D;AACA,QAAMO,QAAQ,GAAG,MAAMxC,IAAI,CAACsC,eAAL,CAAqBb,OAArB,CAAvB;;AAEA,OAAK,MAAMV,UAAX,IAAyByB,QAAzB,EAAmC;AACjC,QAAIA,QAAQ,CAACC,cAAT,CAAwB1B,UAAxB,CAAJ,EAAyC;AACvC,YAAML,MAAM,GAAGD,kBAAkB,CAAC+B,QAAQ,CAACzB,UAAD,CAAT,CAAjC;AACAmB,MAAAA,MAAM,CAACnB,UAAD,CAAN,GAAkCL,MAAlC;AAEAA,MAAAA,MAAM,KAAKT,OAAO,CAACU,OAAnB,IACE4B,qBAAqB,CAACT,IAAtB,CAA2Bf,UAA3B,CADF;AAED;AACF;;AAED,MAAIwB,qBAAqB,CAACV,MAAtB,GAA+B,CAAnC,EAAsC;AACpC,UAAM1B,GAAG,CAACuC,kBAAJ,CAAuBH,qBAAvB,CAAN;AACD;;AAED,SAAOL,MAAP;AACD;;AAED,OAAO,MAAMS,MAAgB,GAAG;AAC9B9B,EAAAA,YAD8B;AAE9BC,EAAAA,KAF8B;AAG9BK,EAAAA,OAH8B;AAI9BY,EAAAA,kBAJ8B;AAK9Ba,EAAAA,oBAAoB,EAAEb,kBALQ;AAM9BC,EAAAA,aAN8B;AAO9BM,EAAAA;AAP8B,CAAzB","sourcesContent":["import {\n  NativeModules,\n  Permission as CorePermission,\n  PermissionsAndroid as Core,\n  PermissionStatus as CoreStatus,\n  Rationale,\n} from 'react-native';\nimport {RESULTS} from './constants';\nimport {Contract} from './contract';\nimport {NotificationsResponse, Permission, PermissionStatus} from './types';\nimport {uniq} from './utils';\n\nconst RNP: {\n  available: Permission[];\n\n  checkNotifications: () => Promise<NotificationsResponse>;\n  openSettings: () => Promise<true>;\n  getNonRequestables: () => Promise<Permission[]>;\n  isNonRequestable: (permission: Permission) => Promise<boolean>;\n  setNonRequestable: (permission: Permission) => Promise<true>;\n  setNonRequestables: (permissions: Permission[]) => Promise<true>;\n} = NativeModules.RNPermissions;\n\nfunction grantedToStatus(granted: boolean): PermissionStatus {\n  return granted ? RESULTS.GRANTED : RESULTS.DENIED;\n}\n\nfunction coreStatusToStatus(status: CoreStatus): PermissionStatus {\n  switch (status) {\n    case 'granted':\n      return RESULTS.GRANTED;\n    case 'denied':\n      return RESULTS.DENIED;\n    case 'never_ask_again':\n      return RESULTS.BLOCKED;\n    default:\n      return RESULTS.UNAVAILABLE;\n  }\n}\n\nasync function openSettings(): Promise<void> {\n  await RNP.openSettings();\n}\n\nasync function check(permission: Permission): Promise<PermissionStatus> {\n  if (!RNP.available.includes(permission)) {\n    return RESULTS.UNAVAILABLE;\n  }\n  if (await RNP.isNonRequestable(permission)) {\n    return RESULTS.BLOCKED;\n  }\n\n  const granted = await Core.check(permission as CorePermission);\n  return grantedToStatus(granted);\n}\n\nasync function request(\n  permission: Permission,\n  rationale?: Rationale,\n): Promise<PermissionStatus> {\n  if (!RNP.available.includes(permission)) {\n    return RESULTS.UNAVAILABLE;\n  }\n  if (await RNP.isNonRequestable(permission)) {\n    return RESULTS.BLOCKED;\n  }\n\n  const status = coreStatusToStatus(\n    await Core.request(permission as CorePermission, rationale),\n  );\n\n  if (status === RESULTS.BLOCKED) {\n    await RNP.setNonRequestable(permission);\n  }\n\n  return status;\n}\n\nasync function splitByUsability<P extends Permission[]>(\n  permissions: P,\n): Promise<{\n  unusables: Partial<Record<P[number], PermissionStatus>>;\n  usables: P[number][];\n}> {\n  const unusables: Partial<Record<P[number], PermissionStatus>> = {};\n  const usables: P[number][] = [];\n  const blocklist = await RNP.getNonRequestables();\n\n  for (let index = 0; index < permissions.length; index++) {\n    const permission: P[number] = permissions[index];\n\n    if (blocklist.includes(permission)) {\n      unusables[permission] = RESULTS.BLOCKED;\n      continue;\n    }\n    if (!RNP.available.includes(permission)) {\n      unusables[permission] = RESULTS.UNAVAILABLE;\n      continue;\n    }\n\n    usables.push(permission);\n  }\n\n  return {unusables, usables};\n}\n\nfunction checkNotifications(): Promise<NotificationsResponse> {\n  return RNP.checkNotifications();\n}\n\nasync function checkMultiple<P extends Permission[]>(\n  permissions: P,\n): Promise<Record<P[number], PermissionStatus>> {\n  const dedup = uniq(permissions);\n  const {unusables: output, usables} = await splitByUsability(dedup);\n\n  await Promise.all(\n    usables.map(async (permission: P[number]) => {\n      const granted = await Core.check(permission as CorePermission);\n      output[permission] = grantedToStatus(granted);\n    }),\n  );\n\n  return output as Record<P[number], PermissionStatus>;\n}\n\nasync function requestMultiple<P extends Permission[]>(\n  permissions: P,\n): Promise<Record<P[number], PermissionStatus>> {\n  const toSetAsNonRequestable: Permission[] = [];\n  const dedup = uniq(permissions);\n  const {unusables: output, usables} = await splitByUsability(dedup);\n  const statuses = await Core.requestMultiple(usables as CorePermission[]);\n\n  for (const permission in statuses) {\n    if (statuses.hasOwnProperty(permission)) {\n      const status = coreStatusToStatus(statuses[permission as CorePermission]);\n      output[permission as P[number]] = status;\n\n      status === RESULTS.BLOCKED &&\n        toSetAsNonRequestable.push(permission as Permission);\n    }\n  }\n\n  if (toSetAsNonRequestable.length > 0) {\n    await RNP.setNonRequestables(toSetAsNonRequestable);\n  }\n\n  return output as Record<P[number], PermissionStatus>;\n}\n\nexport const module: Contract = {\n  openSettings,\n  check,\n  request,\n  checkNotifications,\n  requestNotifications: checkNotifications,\n  checkMultiple,\n  requestMultiple,\n};\n"]}